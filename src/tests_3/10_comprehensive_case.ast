A_program 
	|--A_programElement 
		|--A_structDef struct MyStruct {

			|--A_varDecl 
				|--A_varDeclScalar node:
				|--A_type int,

			|--A_varDecl 
				|--A_varDeclScalar len:
				|--A_type int
}

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar a:
				|--A_type MyStruct;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar b:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar c:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn foo(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar b:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit a>
										|--A_exprUnit b)||
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit b<
										|--A_exprUnit a)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit b-
									|--A_arithExpr 
										|--A_exprUnit 1;
}else{

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit b+
									|--A_arithExpr 
										|--A_exprUnit 1;
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a2:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar b3:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_memberExpr 
						|--A_leftVal a.node = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 3;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_memberExpr 
						|--A_leftVal a.len = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 20;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 
									|--A_memberExpr 
									|--A_leftVal a.len>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_memberExpr 
								|--A_leftVal a.node = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall foo(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 
													|--A_memberExpr 
													|--A_leftVal a.node, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit a2);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_memberExpr 
								|--A_leftVal a.len = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_memberExpr 
												|--A_leftVal a.len-
										|--A_arithExpr 
											|--A_exprUnit b3;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_fnCall foo(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_memberExpr 
										|--A_leftVal a.node, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_memberExpr 
										|--A_leftVal a.len);
}
