fn getint()->int;

fn putint(num:int);

fn putch(ch:int);

let parent[1005]:int;

fn find(root:int)->int{
if((parent[root]==root)){
ret root;
}else{
parent[root] = find(parent[root]);
ret parent[root];
}
}

fn merge(p:int, q:int){
let rootp:int;
let rootq:int;
rootp = find(p);
rootq = find(q);
if((rootp!=rootq)){
parent[rootq] = rootp;
}
}

fn main()->int{
let n:int = getint();
let m:int = getint();
let i:int;
let p:int;
let q:int;
i = 0;
while((i<n)){
parent[i] = i;
i = i+1;
}
i = 0;
while((i<m)){
p = getint();
q = getint();
merge(p, q);
i = i+1;
}
let clusters:int = 0;
i = 0;
while((i<n)){
if((parent[i]==i)){
clusters = clusters+1;
}
i = i+1;
}
putint(clusters);
ret 0;
}

