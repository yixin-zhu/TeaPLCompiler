fn getch()->int;

fn putint(num:int);

fn putch(ch:int);

fn quickread()->int{
let ch:int = getch();
let x:int = 0;
let f:int = 0;
while((ch<48)||(ch>57)){
if((ch==45)){
f = 1;
}
ch = getch();
}
while((ch>=48)&&(ch<=57)){
x = x*10+ch-48;
ch = getch();
}
if((f!=0)){
ret -x;
}else{
ret x;
}
}

let n:int;

let m:int;

let u[1005]:int;

let v[1005]:int;

let c[1005]:int;

let fa[1005]:int;

fn find(x:int)->int{
if((x==fa[x])){
ret x;
}
let asdf:int = find(fa[x]);
fa[x] = asdf;
ret asdf;
}

fn same(x:int, y:int)->int{
x = find(x);
y = find(y);
if((x==y)){
ret 1;
}
ret 0;
}

fn prim()->int{
let i:int = 0;
while((i<m)){
let j:int = i+1;
while((j<m)){
if((c[i]>c[j])){
let t:int = u[i];
u[i] = u[j];
u[j] = t;
t = v[i];
v[i] = v[j];
v[j] = t;
t = c[i];
c[i] = c[j];
c[j] = t;
}
j = j+1;
}
i = i+1;
}
i = 1;
while((i<=n)){
fa[i] = i;
i = i+1;
}
i = 0;
let res:int = 0;
while((i<m)){
if((same(u[i], v[i])!=0)){
continue;
}
res = res+c[i];
let temp:int = find(u[i]);
fa[temp] = v[i];
i = i+1;
}
ret res;
}

fn main()->int{
let n:int = quickread();
let m:int = quickread();
let i:int = 0;
while((i<m)){
u[i] = quickread();
v[i] = quickread();
c[i] = quickread();
i = i+1;
}
ret prim();
}

